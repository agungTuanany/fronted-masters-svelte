//{{{ ** ASCIIDOC HEADER
:description:   Front-end Masters course Svelte with Rich Harris | Chapter - 4
:url-repo:      https://github.com/agungTuanany/fronted-masters-svelte
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Mon May  3 06:28:45 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
:prewrap!:
:figure-caption!:
:source-highlighter: highlight.js
//}}}

[[_chapter_5_class_and_components]]
== Chapter-5 Class and Components

//{{{ == Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h, ~"]
|====
| 1.    | xref:_classes_directive[Class Directive]
| 2.    | xref:_composing_components_with_slots[Composing Components with Slots]
|====
//}}}

// {{{ 1 == Classes Directive
[[_classes_directive]]
== Classes Directive

//{{{ image::./images/chapter-5-1.png
[#img-chapter]
[link=./images/chapter-5-1.png,window=_blank]
.Class Directive
image::./images/chapter-5-1.png[align="center"]
//}}}

So just like any other attributes on the DOM - Elements, you can set the Class of
an Element use JavaScript inside curly braces (`"class={}"`).

But this is such common pattern that we have a special by directive for
classes. Specifically that allow you to toggle Classes based on some condition.

// {{{ === Classes / The Class Directive
=== Classes / The Class Directive

Just take a look in this App.svelte code below,

// {{{ app.svelte
[source, html]
----
// app.svelte
<script>
    let current = 'foo';
</script>

<button
    class="{current === 'foo' ? 'selected' : ''}"
    on:click="{() => current = 'foo'}"
>foo</button>

<button
    class="{current === 'bar' ? 'selected' : ''}"
    on:click="{() => current = 'bar'}"
>bar</button>

<button
    class="{current === 'baz' ? 'selected' : ''}"
    on:click="{() => current = 'baz'}"
>baz</button>

<style>
...
...
</style>
----
// }}}

So, instead of having `{current === 'foo' ? 'active' : ''}`, we can just
replace that whole things with, `class:selected={current === 'foo'}`.

// {{{ app.svelte
[source, html]
----
// app.svelte
<script>
    let current = 'foo';
</script>


<button
    class:selected="{current === 'foo'}"
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    on:click="{() => current = 'foo'}"
>foo</button>

<button
    class:selected="{current === 'bar'}"
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    on:click="{() => current = 'bar'}"
>bar</button>

<button
    class:selected="{current === 'baz'}"
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    on:click="{() => current = 'baz'}"
>
    baz
</button>

<style>
...
...

    .selected {
/*  ~~~~~~~~~ */
        background-color: #ff3e00;
        color: white;
    }
</style>
----
// }}}

We apply that to all of those.

So now I will click on these the active - Class, which add this `background`
- style to the button, will get applied whenever this condition
`class:selected={current === 'foo'}` is `"true"` for each of the button intern,
and that's just less stuff to write.

//{{{ image::./images/gif/chapter-5-1.gif
[#img-chapter]
[link=./images/gif/chapter-5-1.gif,window=_blank]
.Classes / The Class Directive
image::./images/gif/chapter-5-1.gif[align="center"]
//}}}
// }}} ===

// {{{ === Classes / Shorthand Class Directive
[[_classes_shorthand_class_directive]]
=== Classes / Shorthand Class Directive

Just like with the `"bind:value"` shorthand , and the `"source=source"`
shorthand that we've already encountered.

You'll very often have a situation like this, Where the Class you're toggling
is the same as the name of the condition.

// {{{ App.svelte
[source, html]
----
// App.svelte
....
....

<div class:big={big}>
    some {big ? 'big' : 'small'} text
</div>

----
// }}}

So if you have something like this Class, `"class:big={big}"`,

We can get rid of the equals `" ={big}"` - part of that to be like,

// {{{ App.svelte
[source, html]
----
// App.svelte
....
....

<div class:big>
//   ~~~~~~~~~
    some {big ? 'big' : 'small'} text
</div>

----
// }}}

Svelte will fill-in the blank for us.
// }}} ===

**â¬†xref:_table_of_contents[back to top]**
// }}}

// {{{ 2 == Composing Components with Slots
[[_composing_components_with_slots]]
== Composing Components with Slots

So far when talking about Components containing other Components. It's been
*direct* parent-child relationship.

But very often when you're building an application you will need to pass some
*Content* into the Component, not as "Props", but as "Marker"; and for that we
have something called "Slots".

NOTE: Slot is a process called Component Composition.

// {{{ === Component Composition / Slots
[[_component_composition_slots]]
=== Component Composition / Slots
So in the same way that an Element can have children like this,

// {{{ App.svelte
[source, html]
----
// App.svelte
<div>
    <p>I'm the child of the div</p>
</div>
----
// }}}

A `"<div>"` can contain a `"<p>"`.

A Component can have children, but it needs to know where to put them.

So inside our `"Box.svelte"` here, which is going to contain our Content.

// {{{ Box.svelte
[source, html]
----
// Box.svelte
<div class="box">
    <slot></slot>
</div>

<style>
...
...
</style>
----
// }}}

I'll use `"<slot>"` - Element.

Now that we've done that, inside our `"App.svelte"`, we can put some content
Inside the `"<Box>"`

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import Box from './Box.svelte';
</script>

<Box>
    <h2>Hello!</h2>                                     // <<<
    <p>This is a box. It can contain anything.</p>      // <<<
</Box>
----
// }}}

We can put whatever we like, inside that `"<slot>"`.
// }}} ===

// {{{ === Component Composition / Slots Fallbacks
=== Component Composition / Slots Fallbacks

In some situation you might need to have some *fallback* content for your
Component.

Inside the `"<slot>"`, you can specify your *fallback* like so,

// {{{ Box.svelte
[source, html]
----
// Box.svelte
<div class="box">
    <slot>
        <em>Content we provided</em>
    </slot>
</div>

<style>
...
...
</style>
----
// }}}

Then if the Component is created without any Content like so,

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import Box from './Box.svelte';
</script>

<Box>
    <h2>Hello!</h2>
    <p>This is a box. It can contain anything.</p>
</Box>

<Box />     // <<<
----
// }}}

It will use "fallback" marker instead.

//{{{ image::./images/chapter-5-2.png
[#img-chapter]
[link=./images/chapter-5-2.png,window=_blank]
.Component Composition - Slot
image::./images/chapter-5-2.png[align="center"]
//}}}
// }}} ===

// {{{ === Component Composition / Named Slot
=== Component Composition / Named Slot

A component can contain *multiple Slots*. The one we just saw is the so-called
"Default - Slot", but you might have Content that needs to be injected in
a particular place inside a Component. For that we use something called "Name
- Slot".

In this sub-chapter we have a `"ContactCard"` - Component, and we have three
- Slots.

// {{{ COntactCard.svelte
[source, html]
----
// ContactCard.svelte
<article class="contact-card">
    <h2>
        <slot>                                              // <<<
            <span class="missing">Unknown name</span>       // <<<
        </slot>                                             // <<<
    </h2>

    <div class="address">
        <slot>                                              // <<<
            <span class="missing">Unknown address</span>    // <<<
        </slot>                                             // <<<
    </div>

    <div class="email">
        <slot>                                              // <<<
            <span class="missing">Unknown email</span>      // <<<
        </slot>                                             // <<<
    </div>
</article>

<style>
...
...
</style>
----
// }}}

One inside this `"<h2>"`, one inside the `"address"` - class, and one inside
the `"email"` -class.

We just need to provide name for all of those things.

// {{{ COntactCard.svelte
[source, html]
----
// ContactCard.svelte
<article class="contact-card">
    <h2>
        <slot name="name">
//            ~~~~~~~~~~
            <span class="missing">Unknown name</span>
        </slot>
    </h2>

    <div class="address">
        <slot name="address">
//            ~~~~~~~~~~~~~
            <span class="missing">Unknown address</span>
        </slot>
    </div>

    <div class="email">
        <slot name="email">
//            ~~~~~~~~~~~
            <span class="missing">Unknown email</span>
        </slot>
    </div>
</article>

<style>
...
...
</style>
----
// }}}

Then now, if we're using that Component in another Component. We can put in our
contact details and provide the "Slot - Name" as the "Slot - attribute" on the
Element, and it will get put in the correct place.

// {{{ App.svelte
[source, html]
----
// App.svelte
<ContactCard>
    <span slot="name">
//        ~~~~~~~~~~~
        P. Sherman
    </span>

    <span slot="address">
//        ~~~~~~~~~~~~~
        42 Wallaby Way<br>
        Sydney
    </span>
</ContactCard>
----
// }}}

Again if we don't provide any Content fro a particular Slot, like we haven't
provided a `slot="email"`, then it will use the "Fallback" - Content,
specifying the Child - Component.
//}}} ===

// {{{ === Component Composition / Slot Props
=== Component Composition / Slot Props

In some situation, you're going to need to *pass data* from the Child - Component
back to the Parent - Component, so that it can be rendered inside the
Component - content.

Here we have a `"Hoverable"` - Component that look like this,

// {{{ Hoverable.svelte
[source, html]
----
// Hoverable.svelte
<script>
    let hovering;

    function enter() {
        hovering = true;
    }

    function leave() {
        hovering = false;
    }
</script>

<div on:mouseenter={enter} on:mouseleave={leave}>
    <slot></slot>
</div>
----
// }}}

What we want to do is, tell the Contents of the `"Hoverable"` - Component,
whether or not return if we're currently hovering on it.

So it needs to pass the data from the Slot to the Contents.

The Content looks like this,

// {{{ App.svelte
[source, html]
----
// App.svelte
...
...

<Hoverable>
    <div class:active={hovering}>
        {#if hovering}
            <p>I am being hovered upon.</p>
        {:else}
            <p>Hover over me!</p>
        {/if}
    </div>
</Hoverable>

...
...
----
// }}}

So inside the `"Hoverable.svelte"`, we going to add `<slot
hovering={hovering}></slot>`, or we can just do `<slot {hovering}></slot>`

// {{{ Hoverable.svelte
[source, html]
----
// Hoverable.svelte
<script>
    let hovering;

    function enter() {
        hovering = true;
    }

    function leave() {
        hovering = false;
    }
</script>

<div on:mouseenter={enter} on:mouseleave={leave}>
    <slot hovering={hovering}></slot>
//  ~~~~~~~~~~~~~~~~~~~~~~~~~ or
//  <slot {hovering}></slot>
</div>
----
// }}}

Then inside `"App.svelte"`, we're going to expose that by using the "Let
- Directive" (`"let: "`).

// {{{ App.svelte
[source, html]
----
// App.svelte
...
...

<Hoverable let:hovering={hovering}>
//         ~~~~~~~~~~~~~~~~~~~~~~~
    <div class:active={hovering}>
        {#if hovering}
            <p>I am being hovered upon.</p>
        {:else}
            <p>Hover over me!</p>
        {/if}
    </div>
</Hoverable>

...
...
----
// }}}

Now, if you hover this Component, it will tell that it's being hover upon.

//{{{ image::./images/gif/chapter-5-2.gif
[#img-chapter]
[link=./images/gif/chapter-5-2.gif,window=_blank]
.Slot Props
image::./images/gif/chapter-5-2.gif[align="center"]
//}}}

We can change the name of this variable. For example, we change `"{hovering}"`
to `"{active}"`.

// {{{ App.svelte
[source, html]
----
// App.svelte
...
...

<Hoverable let:hovering={active}>
//                      ~~~~~~~
    <div class:active>
//       ~~~~~~~~~~~~ equal to class:active={active}
        {#if active}
//           ~~~~~~
            <p>I am being hovered upon.</p>
        {:else}
            <p>Hover over me!</p>
        {/if}
    </div>
</Hoverable>

...
...
----
// }}}

This Scope, the `"let"` - value is Scope of the Contents of the Component. It
won't escape that Scope. So we can have multiple of these `"<Hoverable>"`.

The value of the Scope, will only be applied to the affected Component, none of
its siblings.
// }}} ===

**â¬†xref:_table_of_contents[back to top]**
//}}}
