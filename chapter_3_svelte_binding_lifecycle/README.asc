//{{{ ** ASCIIDOC HEADER
:description:   Front-end Masters course Svelte with Rich Harris | Chapter - 2
:url-repo:      https://github.com/agungTuanany/fronted-masters-svelte
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Sun May  2 05:37:14 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
:prewrap!:
:figure-caption!:
:source-highlighter: highlight.js
//}}}

[[_chapter_3_binding_and_lifecycle]]
== Chapter 3 Binding And Lifecycle

//{{{ == Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h, ~"]
|====
| 1.    | xref:_input_template_binding[Input & Template Binding]
| 2.    | xref:_media_dimension_binding[Media & Dimension Binding]
| 3.    | xref:_this_component_binding[This & Component Binding]
| 4.    | xref:_onmount_ondestory_lifecycle[onMount & onDestroy Lifecycle]
| 5.    | xref:beforeupdate_afterupdate_tick_lifecycle[beforeUpdate afterUpdate & tick Lifecycle]
|====
//}}}

// {{{ 1 == Input & Template Binding
[[_input_template_binding]]
== Input & Template Binding

//{{{ image::./images/chapter-3-1.png
[#img-chapter]
[link=./images/chapter-3-1.png,window=_blank]
.Svelte Binding & Lifecycle -1
image::./images/chapter-3-1.png[align="center"]
//}}}

So now we're going to move on to the "Binding - Section" of the tutorial, and
as general rule data-flow in Svelte as we've seen goes from *"Parent"* - Component
to the *"Child"* - Component.

In other words, it goes TOP - DOWN.

Some times we need to BREAK that rule. Sometimes we want to get information
from an Element or Component back up to its Parent and this is very common when
we're dealing with `"<form>"` - Elements, for example.

=== Bindings / Text Inputs

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    let name = 'world';
</script>

<input value={name}>

<h1>Hello {name}!</h1>
----
// }}}

So, here's  an `"<input>"` - Element. Doesn't currently doing anything.

But what we want to happen is, for the changes in that `"<input>"` - Element to
be reflected in the State of of the Component.

There is one way that we could do this using Events.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    let name = 'world';
</script>

<input on:input={handleInput} value={name}>
//     ~~~~~~~~~~~~~~~~~~~~~

<h1>Hello {name}!</h1>
----
// }}}

Then we could add Event - Handler and do all of the still that you would
normally do. But it's a little bit *inconvenient*.

Instead in Svelte we can just turn this "Prop" `"value={name}"`, and this
attribute into a "binding" with the "bind - directive" `"bind:value={name}"`.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    let name = 'world';
</script>

<input bind:value={name}>
//     ~~~~

<h1>Hello {name}!</h1>
----
// }}}

Now, whenever the value of the `"<input>"` - Element changes, the value also
changed.

**⬆xref:_table_of_contents[back to top]**
// }}}

// {{{ 2 == Media Dimension Binding
[[_media_dimension_binding]]
== Media & Dimension Binding
:fn-media_element_binding: link:https://svelte.dev/docs#Media_element_bindings

Another type of binding that might no be obvious because it's not a `"<form>"`
- Element is, the Media- Element Binding, and there's a bunch of different
Media Element Bindings.

Media - Elements (<audio> and <video>) have their own set of bindings — six
readonly ones...

- duration (readonly) — the total duration of the video, in seconds
- buffered (readonly) — an array of {start, end} objects
- played (readonly) — ditto
- seekable (readonly) — ditto
- seeking (readonly) — boolean
- ended (readonly) — boolean

...and five two-way bindings:

- currentTime — the current playback time in the video, in seconds
- playbackRate — how fast or slow to play the video, where 1 is 'normal'
- paused — this one should be self-explanatory
- volume — a value between 0 and 1
- muted — a boolean value where true is muted

Videos additionally have *readonly* `"videoWidth"` and `"videoHeight"`
bindings.

All of this things can be added to a Media Element Binding.

It was quite a lot of markup in this tutorial. So if you want to dive into it,
then have a look at this in your own time.

But for now we I want you all see what this actually look like, once we've
added All of the bindings to this `"<videos>"` - Element.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    // These values are bound to properties of the video
    let time = 0;
    let duration;
    let paused = true;

    let showControls = true;
    let showControlsTimeout;

    function handleMousemove(e) {
        // {{{
        // Make the controls visible, but fade out after
        // 2.5 seconds of inactivity
        clearTimeout(showControlsTimeout);
        showControlsTimeout = setTimeout(() => showControls = false, 2500);
        showControls = true;

        if (!(e.buttons & 1)) return; // mouse not down
        if (!duration) return; // video not loaded yet

        const { left, right } = this.getBoundingClientRect();
        time = duration * (e.clientX - left) / (right - left);
    } // }}}

    function handleMousedown(e) {
        // {{{
        // we can't rely on the built-in click event, because it fires
        // after a drag — we have to listen for clicks ourselves

        function handleMouseup() {
            if (paused) e.target.play();
            else e.target.pause();
            cancel();
        }

        function cancel() {
            e.target.removeEventListener('mouseup', handleMouseup);
        }

        e.target.addEventListener('mouseup', handleMouseup);

        setTimeout(cancel, 200);
    } // }}}

    function format(seconds) {
        // {{{
        if (isNaN(seconds)) return '...';

        const minutes = Math.floor(seconds / 60);
        seconds = Math.floor(seconds % 60);
        if (seconds < 10) seconds = '0' + seconds;

        return `${minutes}:${seconds}`;
    } // }}}
</script>

<h1>Caminandes: Llamigos</h1>
<p>From <a href="https://cloud.blender.org/open-projects">Blender Open Projects</a>. CC-BY</p>

<div>
    <video
        poster="https://sveltejs.github.io/assets/caminandes-llamigos.jpg"
        src="https://sveltejs.github.io/assets/caminandes-llamigos.mp4"
        on:mousemove={handleMousemove}
        on:mousedown={handleMousedown}
        bind:currentTime={time}         // <<<
        bind:duration                   // <<<
        bind:paused                     // <<<
    >
        <track kind="captions">
    </video>

    <div class="controls" style="opacity: {duration && showControls ? 1 : 0}">
        <progress value="{(time / duration) || 0}"/>

        <div class="info">
            <span class="time">{format(time)}</span>
            <span>click anywhere to {paused ? 'play' : 'pause'} / drag to seek</span>
            <span class="time">{format(duration)}</span>
        </div>
    </div>
</div>

<style>
...
...
</style>
----
// }}}

As you can see from the code above, we bind into the `currentTime` - State, we
bind into the `duration` - State, we bind into the `paused` - State; and we're
using those to build the "video player" - UI.

I can click anywhere and the video will start. I can drag, rewind, and click
the pause.

Now, the nice thing about the Media Element Bindings is, they're not just using
Native - DOM - Events. They're actually using
`"Window.requestAnimationFrame()"` where applicable. So that the current time
is updated 60 times a second.

**⬆xref:_table_of_contents[back to top]**
// }}}

// {{{ 3 == This & Component Binding
[[_this_component_binding]]
== This & Component Binding

We also have `"this"` - binding, which is a way of getting a *reference* to an
Element inside of your Component.

If you've used `"refs"` in ReactJS, this is similar concept.

// {{{ === Binding / This
[[_binding_this]]
=== Binding / This

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import { onMount } from 'svelte';

    let canvas;

    onMount(() => {
        const ctx = canvas.getContext('2d');
        let frame = requestAnimationFrame(loop);

        function loop(t) {
        frame = requestAnimationFrame(loop);

        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

        for (let p = 0; p < imageData.data.length; p += 4) {
            const i = p / 4;
            const x = i % canvas.width;
            const y = i / canvas.height >>> 0;

            const r = 64 + (128 * x / canvas.width) + (64 * Math.sin(t / 1000));
            const g = 64 + (128 * y / canvas.height) + (64 * Math.cos(t / 1000));
            const b = 128;

            imageData.data[p + 0] = r;
            imageData.data[p + 1] = g;
            imageData.data[p + 2] = b;
            imageData.data[p + 3] = 255;
        }

        ctx.putImageData(imageData, 0, 0);
        }

        return () => {
            cancelAnimationFrame(frame);
        };
    });
</script>

<canvas
    width={32}
    height={32}
></canvas>

<style>
    canvas {
        width: 100%;
        height: 100%;
        background-color: #666;
        -webkit-mask: url(svelte-logo-mask.svg) 50% 50% no-repeat;
        mask: url(svelte-logo-mask.svg) 50% 50% no-repeat;
    }
</style>
----
// }}}

So, here we have a `"<canvas>"` - Element; and when Component is rendered, we
want to paint to that `"<canvas>"`. Which means that we need to get a reference
to the "canvas" so that we can get a reference to the "canvases
- context".

Up here, a value `"let canvas"`.

Then once the Component is *mounted*, using the `"onMount()"` - callback, which
we'll come to later.

We creating the "canvas - Context" using `"canvas.getContext('2d')"`.

If you haven't used "canvas - programming:, and this is NOT familiar, don't
worry. It's more straightforward that it looks. But we're not to get into it
during this course.

So, just roll with it for now.

All we need to do to make this works is, populate this value ('"canvas"`), by
adding `"bind:this={}"`. to the `"<canvas>"` - Element.

// {{{ App.svelte
[source, html]
----
// App.svelte
...
...
<canvas
    bind:this={canvas}
//  ~~~~~~~~~~~~~~~~~
    width={32}
    height={32}
></canvas>
----
// }}}

So now we have a nice animated Canvas inside our Component.

Now I know about the order in which everything happens here. So the
`"<script>"` - tag executes first before any content is actually rendered.
Because very often what happens inside the `"<script>"` - tag Element
*determines* what is going to get rendered.

So, because of that, there's no way this `"let canvas"` can have a value until
later.

So, the `"onMount()"` - callback is the first time that you're able to access
the value of any Element with a "bind:this"  - directive.
// }}} ===

// {{{ === Bindings / Component Bindings
[[_bindings_component_bindings]]
=== Bindings / Component Bindings

So far, we've only looked at the Element  - Bindings. But Components can also
have "bindings".

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import Keypad from './Keypad.svelte';

    let pin;
    $: view = pin ? pin.replace(/\d(?!$)/g, '•') : 'enter your pin';

    function handleSubmit() {
        alert(`submitted ${pin}`);
    }
</script>

<h1 style="color: {pin ? '#333' : '#ccc'}">{view}</h1>

<Keypad on:submit={handleSubmit}/>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----
// }}}

So here we have Component called `"Keypad.svelte"`, which is basically a custom
"Form  - Element". You can think of it that way.

What we want to do is, get the value of what been entered into the keypad into
the Component that is using it. So that we can submit for example, a "PIN
- Number"

// {{{ Keypad.svelte
[source, html]
----
<script>
    import { createEventDispatcher } from 'svelte';

    export let value = '';

    const dispatch = createEventDispatcher();

    const select = num => () => value += num;
    const clear  = () => value = '';
    const submit = () => dispatch('submit');
//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</script>

<div class="keypad">
    <button on:click={select(1)}>1</button>
    <button on:click={select(2)}>2</button>
    <button on:click={select(3)}>3</button>
    <button on:click={select(4)}>4</button>
    <button on:click={select(5)}>5</button>
    <button on:click={select(6)}>6</button>
    <button on:click={select(7)}>7</button>
    <button on:click={select(8)}>8</button>
    <button on:click={select(9)}>9</button>

    <button disabled={!value} on:click={clear}>clear</button>
    <button on:click={select(0)}>0</button>
    <button disabled={!value} on:click={submit}>submit</button>
</div>

<style>
    .keypad {
        display: grid;
        grid-template-columns: repeat(3, 5em);
        grid-template-rows: repeat(4, 3em);
        grid-gap: 0.5em
    }

    button {
        margin: 0
    }
</style>
----
// }}}

So inside the `"keypad.svelte"` - Component, we've created an "Event
- Dispatcher"

Then we have a `"submit"` - event that happens when you click on the "submit"
- button.

But the value itself, we don't have any Events for that. That is going to be
handled through the Binding.

It's just like using the "text" - input, we do `"bind:value={pin}"`. Then the
right hand side, we give the "name" of the variable that it should be bound to.

// {{{ App.svelte
[source, html]
----
// App.svelte
...
...
<Keypad bind:value={pin} on:submit={handleSubmit}/>
//      ~~~~~~~~~~~~~~~
----
// }}}

That's it. You've know how to Bind the Component.
// }}}

**⬆xref:_table_of_contents[back to top]**
// }}}

// {{{ 4 == onMount & onDestroy Lifecycle
[[_onmount_ondestory_lifecycle]]
== onMount & onDestroy Lifecycle

So back when we were looking at the Canvas - tutorial. We saw the `"onMount()"`
- lifecyle function and we're going to have a lifecyle in a bit more detail
now.

What lifecyle is, a description of the *different stages* that are Component
goes through,

- It's *created*, we call that "mounting",
- It's *Updates*, it goes through  numbers updates.
- It's *destroyed*, eventually the Component will destroyed,

The lifecyle - function that you'll use most often is the `"onMount"`
- lifecyle function.

Which runs as soon as the Component has been rendered to the DOM.

// {{{ App.svelte
[source, html]
----
<script>
    let photos = [];
</script>

<h1>Photo album</h1>

<div class="photos">
    {#each photos as photo}
        <figure>
            <img src={photo.thumbnailUrl} alt={photo.title}>
            <figcaption>{photo.title}</figcaption>
        </figure>
    {:else}
        <!-- this block renders when photos.length === 0 -->
        <p>loading...</p>
    {/each}
</div>

<style>
    .photos {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-gap: 8px;
    }

    figure, img {
        width: 100%;
        margin: 0;
    }
</style>
----
// }}}

So in this example, what we want to do is, *add" an online callback that is
going to load some data from - over the network.

// {{{ App.svelte
[source, html]
----
<script>
    import { onMount } from "svelte";
    let photos = [];

    const httpRequest = "https://jsonplaceholder.typicode.com/photos?_limit=20"

    onMount(async () => {
        const response = await fetch(httpRequest);
        photos = await response.json();
    });

</script>
...
...
----
// }}}

So, We import `"onMount"` directly from `"svelte"`.

Then inside the Callback we're going to make a request to `"jsonplaceholder"`
- API.

Then we're going to assign the "return" - value of that API - Call to our
`"photos"` - variable.

So, as soon as that comes in, it's going to Loop - Over the result of that call
and render some placeholder - photos.

Now you could put this block code, Inside the `"<script>"` - tag like so.

// {{{ App.svelte
[source, html]
----
<script>

    onMount(async () => {                           // <<<
        const response = await fetch(httpRequest);  // <<<
        photos = await response.json();             // <<<
    });                                             // <<<

</script>
...
...
----
// }}}

Except, we can't you `"await"` - syntax, so you need to do it like this,

// {{{ App.svelte
[source, html]
----
<script>
    const response = await fetch(httpRequest)
        .then( async response => {
            photos = await response.json();
        })

    onMount(async () => {
    });

</script>
...
...
----
// }}}

So the reason that it makes sense to do this works inside the `"onMount"`
- callback instead of at the top level of your `"<script>"` - Element is, when
you're rendering this Component in a *server-side context*, you don't be
sending off `"fetch()"` - request that are going to come back once the
Component is already been rendered.

That `"fetch()"` - request only matters in the *client-side context*, and the
`"onMount"` - callback *ONLY* run in the 'client-side context".

So any code you put in `"onMount(){}"` - block like so,

// {{{ App.svelte
[source, html]
----
<script>

    onMount(async () => {                           // <<<
        const response = await fetch(httpRequest);  // <<<
        photos = await response.json();             // <<<
    });                                             // <<<

</script>
...
...
----
// }}}

Would NOT run when you use "server-side" - Rendering (SSR) with your Svelte
- Component.

// {{{ === Lifecycle / onDestroy
[[_lifecycle_ondestroy]]
=== Lifecycle / onDestroy

We also have a `"onDestroy"` - callback, which is sort of the opposite of
`"onMount"`.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import { onDestroy } from 'svelte';

    let seconds = 0;
    const interval = setInterval(() => second += 1, 1000);

    onDestroy(() => clearInterval(interval));
</script>

<p>
    The page has been open for
    {seconds} {seconds === 1 ? 'second' : 'seconds'}
</p>
----
// }}}

So in this example above, we want to have an `"interval"` - function that is
going to take up this value `"let second"` once a second.

Then we're going to destroy that `"interval"`. Once the Component is destroyed,
we'll need to clear that `"interval"` to avoid *_generating a memory leak_* in
our application.

Now, `"onDestroy"` is different to `"onMount"`, that it will run inside the
"server-side rendering"  - context.

So if there's any works that happens at the top level of the `"<script>"`
- block, and you need to clean up that work. Then `"onDestroy"` is a good place
to put it.


If you DO the *work* inside `"onMount"`, then you can clean it up inside the
`"onMount"` by returning the `"onDestroy"` - Handler, from the `"onMount"`
- Handler.

But for situation where you're not using `"onMount"`,  `"onDestroy"` is your
friend.

This `"onDestroy"` is just a regular function, which means that we can call it
from anywhere, and this means that we can create our own "Custom - Lifecycle"
- functions.

So, we can abstract this logic out, into "external - Helper".

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    ...
    ...

    let seconds = 0;                                            // <<<
    const interval = setInterval(() => second += 1, 1000);      // <<<

    onDestroy(() => clearInterval(interval));                   // <<<
</script>
----
// }}}

For example, in our `"utils.js"` - file here,

// {{{ utils.js
[source, html]
----
// utils.js
import { onDestroy } from 'svelte';

export function onInterval(callback, milliseconds) {
    const interval = setInterval(callback, milliseconds);
    //                           ~~~~~~~~  ~~~~~~~~~~~~

    onDestroy(() => {
        clearInterval(interval);
    });
}
</script>
----
// }}}

We could take that implementation. We put it inside `"utils.js"` - file,

Instead of *Mutation* of the Component "Private - State" which we no longer
have to access to. We can just cal the provided callback.

Now, we're going to import `"onInterval"` from `"utils.js"` - file in our
"App.svelte".

Then use our "Custom - Lifecycle" - function, like so.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import { onInterval } from './utils.js';

    let seconds = 0;
    onInterval(() => seconds += 1, 1000);
</script>
...
...
----
// }}}

So that's something that you could use in multiple - Component without having
*to duplicate the logic* each time.

So in between `"onMount" and `"onDestroy"`, we have the Update - Cycle, we have
`"beforeUpdate" and "afterUpdate"` which happened as the name suggests.

Before the DOM gets updated with any new State, and then once the DOM is
current with the State that was passed in.

You *won't* need to use these very often, but occasionally you do, and they're
very useful for things that are pretty difficult to achieve, in purely
"Declarative - State Driven" world. Like updating the scroll position of an
Element, for example.
// }}} ===

**⬆xref:_table_of_contents[back to top]**
//}}}

// {{{ 5 == beforeUpdate afterUpdate & tick Lifecycle
[[beforeupdate_afterupdate_tick_lifecycle]]
== beforeUpdate afterUpdate & tick Lifecycle
:fn-eliza_bot: link:http://www.masswerk.at/elizabot/

Here we have the {fn-eliza_bot}[Eliza,window=_blank] - trouble. You can see
Eliza is now talking to use below the screen, and I have to "scroll up" every
time I get new response from her, and that's really not good user experience.

// {{{ === Lifecycle / beforeUpdate and afterUpdate
[[_lifecycle_beforeupdate_and_afterupdate]]
=== Lifecycle / beforeUpdate and afterUpdate

So, we're going to use `"beforeUpdate"` and `"afterUpdate"` to make sure that
the scroll position is kept current with the contents of the chat - window.

// {{{
[source, html]
----
// App.svelte
<script>
    import Eliza from 'elizabot';
    import { beforeUpdate, afterUpdate } from 'svelte';

    let div;
    let autoscroll;

    beforeUpdate(() => {
        // determine whether we should auto-scroll once the DOM is updated...
        autoscroll = div && (div.offsetHeight + div.scrollTop) > (div.scrollHeight - 20);       // <<<
    });

    afterUpdate(() => {
        // ...the DOM is now in sync with the data
      if (autoscroll) div.scrollTo(0, div.scrollHeight);    // <<<
    });

    const eliza = new Eliza();

    let comments = [
        { author: 'eliza', text: eliza.getInitial() }
    ];

    function handleKeydown(event) {

        if (event.key === 'Enter') {
            const text = event.target.value;
            if (!text) return;

            comments = comments.concat({
                author: 'user',
                text
            });

            event.target.value = '';

            const reply = eliza.transform(text);

            setTimeout(() => {
                comments = comments.concat({
                    author: 'eliza',
                    text: '...',
                    placeholder: true
                });

            setTimeout(() => {
                comments = comments.filter(comment => !comment.placeholder).concat({
                    author: 'eliza',
                    text: reply
                });
                }, 500 + Math.random() * 500);
            }, 200 + Math.random() * 200);
        }
    }
</script>


<div class="chat">
    <h1>Eliza</h1>

    <div class="scrollable" bind:this={div}>
        {#each comments as comment}
            <article class={comment.author}>
                <span>{comment.text}</span>
            </article>
        {/each}
    </div>

    <input on:keydown={handleKeydown}>
</div>

<style>
...
</style>
----
// }}}

So first thing we're going to do is create a *new* value called `"autoscroll",
and this going to reflect whether the chat is currently already scrolled up.
Because what we don't want is for the scroll to happen automatically if you're
not able at the latest point in the chat.

So, in `"beforeUpdate()"` - function, we're going to determine whether or not
that is in fact, the case.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    ...
    ...
    beforeUpdate(() => {
        // determine whether we should auto-scroll once the DOM is updated...
        autoscroll = div && (div.offsetHeight + div.scrollTop) > (div.scrollHeight - 20);       // <<<
    });
    ...
    ...
</script>
----
// }}}

So if we have a reference to the `"div"`, because this function will run before
`"onMount"` first run. So we need to check that `"div"` does in fact exist.

Then if the combined value of the `"div.offsetHeight"` and it's
`"div.scrollTop"` is *greater* than the `"div.scrollHeight"` of the Element
minus a little bit of threshold (`20`) - pixels that is.

Then we consider to be an "autoscroll" - mode.

So, if we're not at the end of the chat, NOT in - "autoscroll". Then if we are
at the end of the chat, then we want the `"autoscroll"` to happen.

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    ...
    ...
    afterUpdate(() => {
        // ...the DOM is now in sync with the data
      if (autoscroll) div.scrollTo(0, div.scrollHeight);    // <<<
    });
    ...
    ...
</script>
----
// }}}

Then once the update has happened. Assuming that `"autoscroll"` is *enabled*.
Then we want to scroll the chat - window right to the bottom.

The result is, it scrolls as the chat continues.
// }}} ===

// {{{ === Lifecycle / Tick
[[_lifecycle_tick]]
=== Lifecycle / Tick

There's one more lifecyle - function, that again you're not use very often. But
when you need it is very handy.

It's called `"tick"`. It's unlike `"onMount"` or `"onDestroy"` or
`"beforeUpdate"`, or `"afterUpdate"`. You don't just run it at the start of the
Components - Instantiation. You can run it any time.

You don't need to call it inside the `<script>` - luggage. You can call it
inside Event - Handler. For example, what it does is, it return a "Promise"
that resolves. The soon as any "Pending - State" changes have been applied to
the DOM, or if there aren't any "Pending - State" changes, it'll resolved
immediately.

The reason that's necessary is, that when you update Component - State in
Svelte, it doesn't immediately update the Contents of the DOM. It batches
changes together for the sake of efficiency.

In that way, it's going to wait until the end of the Event - Loop.

So if you have a value that changes first line, and another value that changes
on second line, it's NOT going to do a DOM - update in between them. Because
that would be a little bit *inefficient*.

So it's going to wait until the next "micro - tasks", and it's after that
"micro - tasks" that we want to wait for in order to do any follow at work.

I'm going to give you an example of what I mean by that.

In the text area here. We can toggle whether or not the Selection is uppercase.

//{{{ image::./images/gif/chapter-3-1.gif
[#img-chapter]
[link=./images/gif/chapter-3-1.gif,window=_blank]
.Lifecycle tick -1
image::./images/gif/chapter-3-1.gif[align="center"]
//}}}

Then every time a press it or click the `enter` from the keyboard, the
selection gets cleared out.

Because that's just what happens with `<textarea>` - Elements when you change
the value, it's not going to preserve the previous selection.

We can fix that. Because the `"tick"` - Handler is going to give us an
opportunity to re-apply the selection after the value has been put into the
"textarea".

// {{{ App.svelte
[source, html]
----
// App.svelte
<script>
    import { tick } from 'svelte';
    let text = `Select some text and hit the tab key to toggle uppercase`;

    async function handleKeydown(event) {
        if (event.key !== 'Tab') return;

        event.preventDefault();

        const { selectionStart, selectionEnd, value } = this;
        const selection = value.slice(selectionStart, selectionEnd);

        const replacement = /[a-z]/.test(selection)
            ? selection.toUpperCase()
            : selection.toLowerCase();

        text = (
                value.slice(0, selectionStart) +
                replacement +
                value.slice(selectionEnd)
               );

        // this has no effect, because the DOM hasn't updated yet
        this.selectionStart = selectionStart;
        this.selectionEnd = selectionEnd;
    }
</script>

<style>
    textarea {
        width: 100%;
        height: 200px;
    }
</style>

<textarea value={text} on:keydown={handleKeydown}></textarea>
----
// }}}

So I'm going to import `"tick"` from `"svelte"`.

Then Inside this "Keydown" - Handler (`handleKeydown`), which applied to the
`"textarea"` with screening out any Events that aren't `"Tab"` presses.

If it is a "Tab", we're preventing the Event Default, because otherwise we
would send the focus to a different Element.

Then we're grabbing the Selection - State of the "textarea".

Then we figuring out what the replacement text with the entire "textarea"
should be. So we're taking we're taking everything before the selection,
keeping it everything inside the selection, inverting the case.

Then taking everything from out of the selection, and then we just putting all
that back into the `"text"` - variable.

But this bit here,

// {{{ App.svelte
[source, html]
----
<script>
    ...
    ...
    // this has no effect, because the DOM hasn't updated yet
    this.selectionStart = selectionStart;
    this.selectionEnd = selectionEnd;
</script>
----
// }}}

Where we're reapplying the `"selectionStart"` and `"selectionEnd"`, that's not
working. Because it applies that, and then the DOM  - updates, because this
`"text = {}"` and `"selectionStart"` + `"selectionEnd"` happened before the
DOM is affected by the State - change.

So I'm going to add the above line code with `"await tick()"`.

// {{{ App.svelte
[source, html]
----
<script>
    ...
    ...
    // this has no effect, because the DOM hasn't updated yet
    await tick();
    this.selectionStart = selectionStart;
    this.selectionEnd = selectionEnd;
</script>
----
// }}}

//{{{ image::./images/gif/chapter-3-2.gif
[#img-chapter]
[link=./images/gif/chapter-3-2.gif,window=_blank]
.Lifecycle tick -2
image::./images/gif/chapter-3-2.gif[align="center"]
//}}}

Now when I select the `"text"` and toggle it, is going to present my selections.
I can toggle it back and forth like that so.

So this is pretty neat. This isn't a thing that you're going to need to do
a lot but sometimes you will and you'll be thankful that it exists.
// }}} ===

// {{{ === Some neat question
[[_some_neat_question]]
=== Some neat question

We have some question here.

*"Q"*: Is the "tick" is blocking the DOM for
update when happening and then the rest of code update the DOM again?

*"A"*: No. So, what was happening is, when there's a State change pending a
"Promise", is generally like as soon as a State change happens inside your
Svelte application. A "Promise" is generated that represent the end of the
Event  - Loop essentially.

Then any other work happens, and then that Promise resolves. And it's that
promises that you're getting a reference to you and you call "tick".

So, it's not actually affecting anything. Is literally just a *"timing"*
- thing. Is just waiting for the end of the Update - Cycle to happen.

So that you can do any follow-up work.

It's kind like a `"setTimeout(() => {},0)"`, except that `"seTimemout(()
=>{}.0)"` is like visible *happens* after the *workers* taking place.

*"Q"*: Are there 3rd party plugins and stuff, that do more magical things or
not?

*"A"*" There is NO Binding - Plugins. It's all got to be baked into the
frameworks. Because the Compiler needs to understand it.
// }}} ===

// }}}

// vim: set syntax=asciidoc set tw=79
