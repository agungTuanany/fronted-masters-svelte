//{{{ ** ASCIIDOC HEADER
:description:   Front-end Masters course Svelte with Rich Harris | Chapter - 2
:url-repo:      https://github.com/agungTuanany/fronted-masters-svelte
:Author:        Agung Tuanany
:Email:         agung.tuanany@gmail.com
:Date:          Sun May  2 05:37:14 PM WIB 2021
:Revision:      -
:docinfo:
:docifnodir:
:prewrap!:
:figure-caption!:
:source-highlighter: highlight.js
//}}}

[[_chapter_3_binding_and_lifecycle]]
== Chapter 3 Binding And Lifecycle

//{{{ == Table of Contents
[[_table_of_contents]]
== Table of Contents

[cols="10h, ~"]
|====
| 1.    | xref:_input_template_binding[Input & Template Binding]
|====
//}}}

// {{{ 1 == Input & Template Binding
[[_input_template_binding]]
== Input & Template Binding

//{{{ image::./images/chapter-2-1.png
[#img-chapter]
[link=./images/chapter-3-1.png,window=_blank]
.Svelte Binding & Lifecyle -1
image::./images/chapter-3-1.png[align="center"]
//}}}

So now we're going to move on to the "Binding - Section" of the tutorial, and
as general rule data-flow in Svelte as we've seen goes from *"Parent"* - Component
to the *"Child"* - Component.

In other words, it goes TOP - DOWN.

Some times we need to BREAK that rule. Sometimes we want to get information
from an Element or Component back up to its Parent and this is very common when
we're dealing with "form" - Elements, for example.

=== Bindings / Text Inputs

// {{{ App.svelte
----
// App.svelte
<script>
    let name = 'world';
</script>

<input value={name}>

<h1>Hello {name}!</h1>
----
// }}}

So, here's  an `"<input>"` - Element. Doesn't currently doing anything.

But what we want to happen is, for the changes in that `"<input>"` - Element to
be reflected in the State of of the Component.

There is one way that we could do this using Events.

// {{{ App.svelte
----
// App.svelte
<script>
    let name = 'world';
</script>

<input on:input={handleInput} value={name}>
//     ~~~~~~~~~~~~~~~~~~~~~

<h1>Hello {name}!</h1>
----
// }}}

Then we could add Event - Handler and do all of the still that you would
normally do. But it's a little bit *inconvenient*.

Instead in Svelte we can just turn this "Prop" `"value={name}"`, and this
attribute into a "binding" with the "bind - directive" `"bind:value={name}"`.

// {{{ App.svelte
----
// App.svelte
<script>
    let name = 'world';
</script>

<input bind:value={name}>
//     ~~~~

<h1>Hello {name}!</h1>
----
// }}}

Now, whenever the value of the `"<input>"` - Element changes, the value also
changed.

**â¬†xref:_table_of_contents[back to top]**
// }}}

// vim: set syntax=asciidoc
